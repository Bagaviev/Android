Создание других экранов

Делается не в onCreate в mainActivity, а отдельной функцией. Потом эта функция прокручивается к onClick какой нибудь кнопке.
В маин все интенты создаются и put
В вызываемой активити вытаскиваются get


Custom activity:

Делается через no activity. До этого было Empty activity


Start new activity

Или новый экран, делается через интенты


Обработка кнопки:

Можно руками листенер делать, а можно сделать сначала заглушку метода, а потом в атрибутах (в дизайне) кнопки поставить в onClick созданный метод


Diff size верстка:

Надо делать так, чтобы элемент занимал асе свободное простанство. Это достигается за счет match constraint и группировки компонентов horizontal chain'омй
Ещё можно элементы относительно не краев, а других элементов


Strings android

Нужно не хардкодить строки в параметрах элементов, а выносить в res strings. Там они будут классно лежать, и по ссылке можно будет их юзать
Это можно сделать в строках > translation editor


Окна в приложениях

Это классы активити
Хотим открыть из одного другое, толкаем интент с нужным классом активити, и стартуем его


Intent

Это какая то абстрактная операция, которую надо осуществить


Потоки

Все действия в ui потоки делать отдельно, в background. Не в методах lifecycle activity


Activity data restore

1mb max bundle size
Тяжёлое в бд, а лёгкое можно


Activity lifecycle

При нажатии домой, состояние сохраняется, послет возврата (foreground) данные на месте должны быть (в память, из памяти)
onResume()/onPause()
При назад много раз, backstack приложения очищается и оно закрывается, состояние не сохраняется (сохранять на диск)
OnStop()
Также может закрыться если приложение в background (не на экране) и не хватает памяти


Android nuance

Все асинхронное, на коллбеках
Мы лишь говорим, чтобы чтото запустилось, а не запускаем


Эмулятор/Реал девайс:

Надо относительно экрана все выравнивать симметрично, слева справа, сверху, снизу. А не в 2х осях. Иначе съезжает на девайсе с другим экраном


Положение view

Чтобы закреплялись, нужно делать constraint со всех 4 сторон кружочком
Иначе только в дизайне будет ровно, а в рантайме криво


Android studio shortcuts:

все как в идее +
Alt + shift + left/right вкладки design, code


Переносимость

Работает на любом девайсе с min sdk прописанным, и на target
Все элты должны относительно поставлены быть


Density pixel (dp)

Ppi= sqrt(wid^2 + hei^2)/diag, а можно тупа длину в пискелах по горизонтали поделить на длину экрана в дюймах и получить примерное значение(по ширине примерно такое же будет)
100px!=100dp
Виртуальный пиксель для среднеплотных экранов (160dp). На ноуте 100ppi, херовый экран
На низкоплотном экране картинка уедет, станет огромной, эту пробл как раз решает dp
Dpi dots per inch
Ppi pixels per inch
Px = dp * (dpi / 160)
Говорим 16dp подразумеваем, что на таком стандартном экране длина определённая будет (пр.16 пикселов - 2.5мм). Для каждого нового экрана нужен будет пересчёт с учётом его плотности пикселей.есть пример в доках, см density. Для высоких разрешений он там захардкожен типа 0.75, 1, 1.5, 2
Экраны 2340х1080 высота на ширину


Aos

View это сущности типа текстового поля, картинки и тд. Могут быть сгруппированы в ViewGroup (пр. Layout, ConstrLayout)
Каждому экрану приложения свой activity класс с логикой + свой activity xmlник. На каждый xmlник свои layouts вставляются, в них - views
Локализации делаются через strings класс


Apk build

Build > build apk
Bundle типа apk для публикаций
Ещё можно apk analyze чето посмотреть там декомпилировать сорс


ADB

adb logcat
adb shell (можно как в линксе файловую систему дрочить, но нужен рут на мобиле)
adb push/pull
run-as com.domain.app перейти в директорию (data) с приложением
adb shell monkey -p com.ex.app -c android.intent.category.LAUNCHER 1 запуск приложения из консоли


Android studio

Простой hello world заработал, так ахуенно! Надо чтобы был включён debug mode на девайсе.
Можно на эмуляторе тестить, а можно на реальном.
На последнем, из IDE устанавливается приложение на устройство, запускается, и останавливается. Также какие то логи пишутся в консоль


Android

Manifest.xml структура
MainActivity.java логика экрана
activity_main.xml интерфейс экрана (макета, layout)
Приложение состоит из Activity классов-экранов
View это XML ники


Callbacks

Код который вызывается асинхронно, когда будет получен результат. Некий объект который будет вызван, когда функция в другом потоке отработает.
Коллбеки от системы при создании компонентов, не напрямую вызываем, а события от ОС.
Позволяют быть уверенными, что опр код не начнёт исполнение до того момента, пока другой код не завершит исполнение
Пример с JS там одна функция начинала выполнятстся раньше той, что была выше её в коде, но времяемкая


Xml

Если в тегах есть вложенные теги другие, то первый должен быть парным <...> абс </...>
Если нет, то может быть непарным < ... />
